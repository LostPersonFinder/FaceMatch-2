/*
Informational Notice:
This software was developed under contract funded by the National Library of Medicine, which is part of the National Institutes of Health, 
an agency of the Department of Health and Human Services, United States Government.

- The license of this software is an open-source BSD license.  It allows use in both commercial and non-commercial products.

- The license does not supersede any applicable United States law.

- The license does not indemnify you from any claims brought by third parties whose proprietary rights may be infringed by your usage of this software.

Government usage rights for this software are established by Federal law, which includes, but may not be limited to, Federal Acquisition Regulation 
(FAR) 48 C.F.R. Part52.227-14, Rights in Data—General.
The license for this software is intended to be expansive, rather than restrictive, in encouraging the use of this software in both commercial and 
non-commercial products.

LICENSE:

Government Usage Rights Notice:  The U.S. Government retains unlimited, royalty-free usage rights to this software, but not ownership,
as provided by Federal law.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
•	Redistributions of source code must retain the above Government Usage Rights Notice, this list of conditions and the following disclaimer.

•	Redistributions in binary form must reproduce the above Government Usage Rights Notice, this list of conditions and the following disclaimer 
in the documentation and/or other materials provided with the distribution.

•	The names,trademarks, and service marks of the National Library of Medicine, the National Cancer Institute, the National Institutes 
of Health,  and the names of any of the software developers shall not be used to endorse or promote products derived from this software without 
specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE U.S. GOVERNMENT AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITEDTO, 
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE U.S. GOVERNMENT
OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/*
*  Add a new ImageExtent to the FaceMatch2 system for conducting image  ingest and queries
* All associated information is provided in a SQL file, which is submitted to the database
*/

package fm2client.app;


import fm2client.core.FM2ServiceRequestor;
import fm2client.core.FM2ServiceResult;

import fm2client.testgen.FMTestSetBuilder;    
import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;

import java.util.Properties;

import org.apache.log4j.Logger;


public class ExtentOpsApp extends FM2WebClient
{
    private static Logger log  = Logger.getLogger(ExtentOpsApp.class);
    
     public ExtentOpsApp(String testConfigFile) throws Exception
     {
         super (testConfigFile, true);         // realtime operations with the server     
     }
     
     //------------------------------------------------------------------------------------------*/
     
      public ExtentOpsApp(Properties testProperties,  boolean realTime) throws Exception
     {
         super (testProperties,  realTime);         // realtime operations with the server     
     }

      //------------------------------------------------------------------------------------------*/
     protected void doExtentOpTests(String testFileName)
     {
          // Check if it is full filename or relative to the path in the config file
        String faceMatchTestFile = "";
        File testFile = new File(testFileName);
        if (testFile.exists())          // a fully qualified fiename
            faceMatchTestFile = testFileName;
        else
        {
            String testdataDir = testProperties.getProperty("fm2test.datadir");
             faceMatchTestFile = testdataDir+"/"+testFileName;
        }
        log.info ("\n>>> Performing test  using data from " + faceMatchTestFile);
        

         FMTestSetBuilder  fmTestSetBuilder = new FMTestSetBuilder(testProperties);            // testProprties generated by Parent class
         ArrayList<HashMap> extentTestDataSet = fmTestSetBuilder.getTestParams(faceMatchTestFile);
         if (extentTestDataSet == null)
         {
             log.error("No valid  test  dataset for FaceMatch testing found in test file.");
         }
         for (int i = 0; i < extentTestDataSet.size(); i++)
         {
             requestExtentOpsService( i, extentTestDataSet.get(i));
         }
     }

     /*---------------------------------------------------------------------------------------*/ 
     // Perform individual FaceFinder test - 
     // Return the server response as Strinf to the caller
    /*---------------------------------------------------------------------------------------*/
    public int  requestExtentOpsService( int testNum, HashMap inputParams)
    {
        System.out.println("-----------------------------------------------");
        FM2ServiceRequestor  serviceRequestor = new FM2ServiceRequestor(fm2ServerURL);
        FM2ServiceResult serviceResult = 
                 serviceRequestor.requestExtentOpsService(testNum, inputParams);
        return 1;
     }   
  /********************************************************************************************/
/** Perform remote testing of the FaceMatch Web Server using the standard FMConfiguration file
 * and appropriate test data sets.
 * @param args 
 *********************************************************************************************/      
    public  static void main(String[] args)
    {
        
        String  defaultConfigFile = getDefaultConfigFile();
        String  testConfigFile =  (args.length > 1) ?  args[1] : defaultConfigFile;
        System.out.println("using Configuration file: "+ testConfigFile);
        
        try
        {
            ExtentOpsApp extentOpsApp =  new ExtentOpsApp(testConfigFile);
            
            if (!extentOpsApp.isValidConnection())
            {
                System.out.println("Cannot talk to the FM2 server. Exiting.");
                System.exit(-1);
            }  
            // for testing only 
           // String testFile  = "/home/dmisra/DevWork/FaceMatch2/FM2FullTest/testrepos/testdata/PL/extent/PL_ExtentInfo_1-23.json";
            String testFile = args[0]; 
            extentOpsApp.doExtentOpTests(testFile);
        }
        catch (Exception e)
        {
                System.out.println("Error while activating/running FMClientApp, error: " + e.getMessage() + ". Exiting.");
                e.printStackTrace();
                System.exit(-1);
        }
    }
}
    
     